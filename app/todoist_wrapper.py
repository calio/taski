import todoist
from datetime import datetime
from base import *
from util import dlog

class Todoist(GTDSystem):
    def __init__(self, username, password):
        self.api = todoist.TodoistAPI()
        self.user = None
        self.data = None
        #self.imgr = todoist.managers.items.ItemsManager(self.api)
        self.user = self.api.user.login(username, password)

    def _task_adapter(self, todoist_task):
        t = Task()
        tt = todoist_task
        t.id = tt['id']
        t.name = tt['content']
        t.done = tt['checked']
        t.pid = tt['project_id']
        if tt['completed_date']:
            t.ts_done = datetime.strptime(tt['completed_date'], "%a %d %b %Y %H:%M:%S +0000")
            t.done = True
        else:
            t.ts_added = datetime.strptime(tt['date_added'], "%a %d %b %Y %H:%M:%S +0000")

        t._data = tt

        pass

    def init(self, cfg):
        self.user = self.api.user.login(cfg["email"], cfg["password"])
        self.data = self.api.sync()

    def get_tasks(self, completed=False, since=None, until=None):
        ttasks = self.data['items']
        tasks = []
        for tt in ttasks:
            tasks.append(self._task_adapter(tt))
        return tasks

    def update_task(self, task, key, value):
        #self.imgr.update(task.id, key=value)
        pass
    def get_projects(self):
        pass
    def commit(self):
        pass

    def add_project(self, name):
        self.api.projects.add(name)

    def clear(self):
        pass
#        self.data = self.api.sync()
#
#        items = self.api.items.all()
#        for i in items:
#            print("delete: ", i)
#            i.delete()
#
#        projects = self.api.projects.all()
#        for p in projects:
#            print("delete: ", p)
#            p.delete()
#
#        raw_input("are you sure to delete?")
#        self.api.commit()


    def dump(self):
        ref = {}
        gtd = GTDSystem()
        gtd.meta['source'] = "todoist_wrapper"

        self.data = self.api.sync()
        projects = self.api.projects.all()
        for p in projects:
            gtd_project = gtd.add_project(p['name'])
            ref[p['id']] = gtd_project
            gtd_project.meta["todoist_id"] = p['id']


        items = self.api.items.all()
        for t in items:
            gtd_project = ref[t['project_id']]
            task = gtd_project.add_task(t['content'])
            task.meta["todoist_id"] = t['id']

        return gtd

    def update(self, gtd):
        ''' update Todoist from a modified gtd object which is previously
            generated by self.dump()
        '''

        if gtd.meta["source"] != "todoist_wrapper":
            raise Exception("Try to update Todoist from a GTDSystem object not generated by Todoist")

        


    def load(self, gtd):
        old = self.dump()
        new = gtd

        # compare the difference

        gtd_projects = gtd.get_projects()
        for p in gtd_projects:
            project = self.api.projects.add(p.name)
            gtd_tasks = p.get_tasks()
            for t in gtd_tasks:
                self.api.items.add(t.name, project.id)

        self.api.commit()



